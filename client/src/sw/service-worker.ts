/// <reference lib="webworker" />

// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.

import { decryptString, generateKeyFromString } from 'dha-encryption';
import { IContact, IMessage, IUserProfile } from '../types';
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { createHandlerBoundToURL, precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

//---------- SYNC WITH service-worker-testpush.js
let contacts: Map<string, IContact>;
let user: IUserProfile;

self.addEventListener('message', (event) => {
  console.debug('SW received message event!', event);
  if (event.data && event.data.type === 'SKIP_WAITING') {
    // This allows the web app to trigger skipWaiting
    self.skipWaiting();
  } else if (event.data.type === 'UPDATE_CONTACTS') {
    contacts = event.data.contacts;
    user = event.data.user;
    console.info('ServiceWorker received User and his contacts!', user, contacts);
  }
});

self.addEventListener('push', (pushEvent) => {
  console.info('Push Event received!', pushEvent);
  console.debug('pushEvent.target', pushEvent.target, pushEvent.currentTarget);
  console.debug('pushEvent.timeStamp', pushEvent.timeStamp);

  if (!pushEvent.data || !pushEvent.data.text()) {
    console.warn('No push data available');
    return;
  }

  //production payload is encrypted
  let payload /* encrypted string */ = pushEvent.data.text();

  console.debug('Encrypted push data.text', payload);
  payload = decryptString(payload, generateKeyFromString(user.peerid));
  console.debug('Decrypted push data.text', payload);

  const message: IMessage = JSON.parse(payload);

  const contact = contacts.get(message.sender);

  if (!contact) {
    console.warn('Received Push from unknown contact', payload);
    return;
  } else console.log('Found contacts for pushmessage ', contact);

  const actionOpen = {
    title: 'Open',
    action: 'open',
  };
  const actionClose = {
    title: 'Close',
    action: 'close',
  };

  const notificationOptions: NotificationOptions = {
    body: message.payload,
    badge: contact.avatar,
    //    image: contact.avatar,
    //    icon: 'https://volatalk.org/mstile-150x150.png',
    icon: contact.avatar,
    vibrate: [1000, 2000, 3000, 4000, 5000],
    actions: [actionOpen, actionClose],
    requireInteraction: message.urgent,
    renotify: message.urgent,
    data: contact.peerid,
  };
  self.registration.showNotification(contact.nickname, notificationOptions);
});

/**
 * https://developer.mozilla.org/en-US/docs/Web/API/Clients/openWindow
 * https://w3c.github.io/ServiceWorker/#clients-openwindow
 *
 */
self.addEventListener(
  'notificationclick',
  function (event) {
    console.debug('Clicked pushed notification', event);
    event.notification.close();

    console.log('self.location.origin', self.location.origin);
    event.waitUntil(
      self.clients.matchAll({ type: 'window' }).then((clientsArr) => {
        console.debug('Open windows: ' + clientsArr);
        // If a Window tab matching the targeted URL already exists, focus that;
        const hadWindowToFocus = clientsArr.some((windowClient) =>
          windowClient.url.includes(self.location.origin) ? (windowClient.focus(), true) : false
        );
        // Otherwise, open a new tab to the applicable URL and focus it.
        if (!hadWindowToFocus)
          self.clients
            .openWindow(self.location.origin + '/messages/' + event.notification.data)
            .then((windowClient) => (windowClient ? windowClient.focus() : null));
      })
    );
  },
  false
);
