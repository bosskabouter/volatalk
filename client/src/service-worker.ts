/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

//TODO USE UNENCRYPTED DB FOR PUSH SECRET KEY EXCHANGE
//import { AppDatabase } from 'Database/Database';
import { decryptString, generateKeyFromString } from 'dha-encryption';
import { identicon } from 'minidenticons';
import { IMessage } from './types';
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { createHandlerBoundToURL, precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
// Any other custom service worker logic can go here.
const VOLA_SECRET_PUSH = '1a2b3c-but there is more to it - &*@^';

self.addEventListener('push', (pushEvent) => {
  console.info('Push Event received!', pushEvent);
  console.info('pushEvent.target', pushEvent.target, pushEvent.currentTarget);
  console.info('pushEvent.timeStamp', pushEvent.timeStamp);

  if (!pushEvent.data) {
    console.warn('No push data available');
    return;
  }
  let data = JSON.parse(pushEvent.data.text());

  console.info('Found Encrypted push text', data);
  data = decryptString(data, generateKeyFromString(VOLA_SECRET_PUSH));
  console.info('Decrypted push', data);

  const message: IMessage = JSON.parse(data);

  const senderInfo = JSON.parse(message.sender);
  const action: NotificationAction = {
    title: 'Accept',
    action: 'handleThis' + senderInfo.contactid,
  };
  self.registration.showNotification(senderInfo.nickname, {
    body: message.payload,
    vibrate: [2000, 2500],
    actions: [action],
    requireInteraction: true,
    //icon: 'https://www.volatalk.org/mstile-150x150.png',
    icon: 'data:image/svg+xml;utf8,' + identicon(senderInfo.contactid),
    //iconURL: 'https://www.volatalk.org/mstile-150x150.png',
  });
});
